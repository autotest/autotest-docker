---
# playbook for installing docker-autotest on a Fedora host
# such that it will test *podman* (not docker)
#
# Usage: ansible-playbook -i HOSTNAME, setup-podman-autotest.yml -v
#                                    ^-- the comma is required
#
# HOSTNAME is a Fedora 27 virt; you must have root ssh access to it.
#
- hosts: all
  gather_facts: false        # ARGH! Fedora has no /usr/bin/python
  user: '{{ name | default("fedora") }}'
  become: yes
  vars:
    destdir:           /var/lib/autotest
    autotest_rpm_deps: [ procps, tar, findutils, bzip2, gdb, bridge-utils,
                         nfs-utils, git, glibc-devel, python-bugzilla, which,
                         cloud-utils-growpart, python-nose, python-unittest2,
                         python2-mock, python-docutils, python-sphinx,
                         python-sphinxcontrib-httpdomain,
                         python-sphinx_rtd_theme,
                         selinux-policy-targeted, libselinux-python ]

  tasks:
  # Fedora, as of 23, has no /usr/bin/python (just python3). Ansible
  # isn't smart enough to try running python3. This step bootstraps us.
  #    http://blog.oddbit.com/2015/10/15/bootstrapping-ansible-on-fedora-23/
  - name: install python
    raw: dnf -y -e0 -d0 install python python-dnf

  - name: NOW gather facts
    setup:

  - name: install rpms needed for autotest
    dnf: name={{ item }} state=present
    with_items: "{{ autotest_rpm_deps }}"

  # git repos: autotest and autotest-docker. update=no means "chill": it
  # lets us modify files in the repos without Ansible barfing on future
  # runs. If you ever want to update, just rm -rf the checkout manually.
  - name: install autotest
    git: repo=https://github.com/autotest/autotest.git
         dest={{ destdir }} update=no recursive=no

  - name: install autotest-docker
    git: repo=https://github.com/edsantiago/autotest-docker.git
         dest="{{ destdir }}/client/tests/docker" update=yes
         version=podman_fixes

  - name: autotest-docker | custom config
    action: copy src=ansible-files/{{item}}
            dest="{{ destdir }}/client/tests/docker/config_custom/{{ item }}"
    with_items: [ control.ini, defaults.ini, tests.ini ]

#############################################################################
# BEGIN podman-specific setup

  - name: make sure docker is NOT installed
    dnf: name=docker-client state=absent

  - name: install bbaude COPR repo
    action: copy src=ansible-files/_copr_baude-Upstream_CRIO_Family.repo
                 dest=/etc/yum.repos.d/_copr_baude-Upstream_CRIO_Family.repo

  - name: install podman
    dnf: name=podman state=present

  - name: symlink to docker filter
    file: src="{{ destdir }}/client/tests/docker/kpod-filter"
          dest="/usr/bin/docker"
          state=link

  # Without this, the systemd test fails
  - name: docker filter script | set SELinux context
    command: chcon -u system_u -t container_runtime_exec_t "{{ destdir }}/client/tests/docker/kpod-filter"

  # Without this, the systemd-in-container test fails, cgroup perms errors
  - name: Magic SELinux boolean allows running systemd in container
    seboolean: name=container_manage_cgroup state=yes persistent=yes

# END   podman-specific setup
#############################################################################
# BEGIN nginx configuration

  # So nginx can serve files. We can't seem to do this using the
  # ansible file module with setype: it's not recursive.
  - name: autotest | SELinux policy 1
    action: file path={{destdir}}/client/results state=directory

  # Sigh. On RHEL, semanage fcontext -a can be run over and over again.
  # On Fedora, the second time, it barfs:
  #    ValueError: File context for [...] already defined
  # Let's try using the sefcontext module instead
  - name: autotest | SELinux policy 2 | ansible prerequisites
    package: name=policycoreutils-python state=present

  - name: autotest | SELinux policy 2
    sefcontext: target="{{destdir}}/client/results(/.*)?"
                setype=httpd_sys_content_t

  - name: autotest | SELinux policy 3
    command: restorecon -R {{destdir}}/client/results

  - name: nginx is installed
    package: name=nginx state=present

  - name: configure nginx | root
    lineinfile: dest=/etc/nginx/nginx.conf
                regexp="^\s+root\s"
                state=absent
    notify: restart nginx

  - name: configure nginx | default
    action: copy src=ansible-files/nginx-default.conf
                dest=/etc/nginx/default.d/default.conf
                owner=root group=root
    notify: restart nginx

  # Open port 80 to allow viewing results.
  # FIXME: Brent says this isn't necessary on his virts; they default to open
  # Grumble. ansible firewalld module is broken on Fedora
  #   https://github.com/ansible/ansible/issues/38161
  #   https://github.com/ansible/ansible/pull/37603
##  - name: firewalld is installed
##    package: name=firewalld state=present
##
##  - name: firewalld is running
##    service: name=firewalld state=started enabled=yes
##
##  - name: open http port (now)
##    shell: firewall-cmd --add-port=80/tcp
##
##  - name: open http port (on reboot)
##    shell: firewall-cmd --add-port=80/tcp --permanent

# END   nginx configuration
#############################################################################


  handlers:
    - name: restart nginx
      service: name=nginx state=restarted enabled=yes
