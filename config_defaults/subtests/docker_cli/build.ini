[docker_cli/build]
subsubtests = local_path,https_file,git_path,rm_false,cache,
              bad,bad_quiet,bad_force_rm,dockerignore,expose,
              addurl,jsonvol,onbuild

#: ``docker build`` options as CSV list
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=false

#: Customize to match locally available resources
#: Paths to docker build contexts used by tests (built during setup)
source_dirs = full,part,bad,dockerignore,expose,addurl,jsonvol,onbuild

#: A ``/`` + a relative path from test setup directory, to subdirectory
#: containing a ``Dockerfile`` (and it's context). Alternatively, a
#: ``http``/``ftp``/``git`` url accepted by the ``docker build`` command
#: (with out any ``/`` prefix).
dockerfile_dir_path =

#: Set to ``yes`` when ``dockerfile_dir_path`` is a writeable file, and test
#: should substitute default test repo into FROM statement.  Set to
#: ``no`` otherwise, or when ``dockerfile_dir_path`` is a remote
#: read-only resource.
use_config_repo = yes

#: Name of dockerfile to use with ``-f`` option, blank for
#: no ``-f`` (use ``Dockerfile``).
minus_eff =

#: Whether or not to examine docker-build output for terminal escape codes
#: as part of the ``postive()`` or ``negative()`` post-processing commands.
#: Defaults to disabled, Docker-1.13 ignores $TERM for build
#: sub-command (BZ1403326)
enable_nonprintables_check = no

#: Comma-separated post-process checks to call, in order, with optional
#: string parameter enclosed in ``('``, ``')``.  Check commands are:{n}
#: {n}
#: {t}  * ``positive()`` - Exit code must be zero, no Go panics or
#: {t}    usage messages{n}
#: {t}  * ``negative()`` - Exit code must be non-zero, no Go panics or
#: {t}    usage messages{n}
#: {t}  * ``rx_out('<regex>')`` - Must match stdout to ``<regex>`` on one
#: {t}    or more lines{n}
#: {t}  * ``!rx_out('<regex>')`` - Must not match stdout to ``<regex>`` on
#: {t}    any line{n}
#: {t}  * ``rx_err('<regex>')`` - Must match stderr to ``<regex>`` on one
#: {t}    or more lines{n}
#: {t}  * ``!rx_err('<regex>')`` - Must not match stderr to ``<regex>`` on any
#: {t}    line{n}
#: {t}  * ``img_count('<number>')`` - Must be ``<number>`` additional images
#: {t}    after build{n}
#: {t}  * ``cnt_count('<number>')`` - Must be ``<number>`` additional containers
#: {t}    after build{n}
#: {t}  * ``last_cnt()`` - Last created container must exist after build{n}
#: {t}  * ``img_exst()`` - Generated/Unique image name must exist{n}
#: {t}  * ``!img_exst()`` - Generated/Unique image name must not exist{n}
#: {t}  * ``intr_exst()`` - All intermediate created images must exist{n}
#: {t}  * ``!intr_exst()`` - No intermediate created images must exist{n}
#: {t}  * ``file_exist('<path>')`` - File named by ``<path>`` must exist{n}
#: {t}  * ``!file_exist('<path>')`` - File named by ``<path>`` must **not** exist{n}
#: {t}  * ``dir_exist('<path>')`` - dir named by ``<path>`` must exist{n}
#: {t}  * ``!dir_exist('<path>')`` - dir named by ``<path>`` must **not** exist{n}
#: {t}  * ``rx_file('<path>:<regex>')`` - file named by ``<path>`` must exist
#: {t}    and ``<regex>`` must match (no space either side of ``:`` please)
#: {t}  * ``!rx_file('<path>:<regex>')`` - file named by ``<path>`` must exist
#: {t}    and ``<regex>`` must **not** match.

postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   cnt_count('0'),
                   img_count('1'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/local_path]
dockerfile_dir_path = /full
# Inherits options from main subtest section (above)
# no need to repeat them here.

[docker_cli/build/https_file]
__example__ = dockerfile_dir_path, postproc_cmd_csv
use_config_repo = no
dockerfile_dir_path = https://raw.githubusercontent.com/autotest/autotest-docker/master/subtests/docker_cli/build/full/Dockerfile
# Hard code this to base-image used in remote dockerfile (above)
docker_registry_host = registry.access.redhat.com
docker_registry_user = rhel7
docker_repo_name = rhel
docker_repo_tag = latest
postproc_cmd_csv = positive(),
                   rx_out('Schazam!$'),
                   rx_out('foobar$'),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   cnt_count('0'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/git_path]
__example__ = dockerfile_dir_path, postproc_cmd_csv
use_config_repo = no
dockerfile_dir_path = git://github.com/autotest/autotest-docker.git
# Hard code this to base-image used in remote dockerfile (above)
docker_registry_host = docker.io
docker_registry_user = stackbrew
docker_repo_name = centos
docker_repo_tag = latest
postproc_cmd_csv = positive(),
                   rx_out('It works!$'),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   cnt_count('0'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/bad]
dockerfile_dir_path = /bad
postproc_cmd_csv = negative(),
                   rx_out('Schazam!$'),
                   !rx_out('foobar$'),
                   !rx_err('Successfully built')
                   rx_err('returned a non-zero code'),
                   cnt_count('docker=1;podman=0'),
                   img_count('docker=1;podman=0'),
                   intr_exst('2'),
                   last_cnt(),
                   !img_exst()

[docker_cli/build/bad_quiet]
dockerfile_dir_path = /bad
docker_build_options = --rm=true,--no-cache=true,--quiet=true,--force-rm=false
postproc_cmd_csv = negative(),
                   !rx_out('Schazam!$'),
                   !rx_out('foobar$'),
                   !rx_err('Successfully built')
                   rx_err('returned a non-zero code'),
                   cnt_count('docker=1;podman=0'),
                   img_count('docker=1;podman=0'),
                   last_cnt(),
                   !img_exst()

[docker_cli/build/bad_force_rm]
dockerfile_dir_path = /bad
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=true
postproc_cmd_csv = negative(),
                   rx_out('Schazam!$'),
                   !rx_out('foobar$'),
                   !rx_err('Successfully built')
                   rx_err('returned a non-zero code'),
                   cnt_count('0'),
                   img_count('docker=1;podman=0'),
                   !img_exst()

[docker_cli/build/rm_false]
dockerfile_dir_path = /full
docker_build_options = --rm=false,--no-cache=true,--quiet=false,--force-rm=false
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   cnt_count('docker=5;podman=0'),
                   img_count('1'),
                   img_exst(),
                   intr_exst()

[docker_cli/build/cache]
# first build
dockerfile_dir_path = /part
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=false
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   !rx_out('Using cache')
                   rx_out('Schazam!$'),
                   cnt_count('0'),
                   img_count('2'),
                   img_exst(),
                   intr_exst()
#: Second build uses this path to check caching of first build
dockerfile_dir_path2 = /full
#: Second build Options CSV
docker_build_options2 = --rm=true,--no-cache=false,--quiet=false,--force-rm=false
#: Second build ``postproc_cmd_csv``.
postproc_cmd_csv2 = positive(),
                    rx_out('docker=Using cache;podman=')
                    rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                    !rx_out('docker=Schazam!$;podman=Nonsense_String'),
                    cnt_count('0'),
                    img_count('2'),
                    img_exst(),
                    intr_exst()

[docker_cli/build/dockerignore]
dockerfile_dir_path = /dockerignore
#: Substitution regex for content in all files expected to exist
_rx = 05304147-3222-4b4b-ba27-2a8dca10ec81\w*
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   cnt_count('0'),
                   img_count('1'),
                   img_exst(),
                   intr_exst(),
                   !file_exist('/ignored_file'),
                   !dir_exist('/ignored_dir'),
                   !file_exist('/ignored_dir/ignored_file'),
                   !dir_exist('/ignored_dir/ignored_subdir'),
                   !file_exist('/ignored_dir/ignored_subdir/ignored_file'),
                   !file_exist('/not_ignored_dir/ignored_file'),
                   !file_exist('/.dockerignore'),
                   rx_file('/not_ignored_file:%(_rx)s'),
                   rx_file('/not_ignored_dir/not_ignored_file:%(_rx)s')

[docker_cli/build/expose]
dockerfile_dir_path = /expose

[docker_cli/build/addurl]
dockerfile_dir_path = /addurl
__example__ = fileurl,filepath,fileregex
#: URL to unambiguous filename to sub. in Dockerfile
fileurl = https://raw.githubusercontent.com/autotest/autotest-docker/master/LICENSE
#: Absolute path to filename in container
filepath = /LICENSE
#: Regular expression to find inside file
fileregex = TERMS AND CONDITIONS FOR COPYING
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   img_exst(),
                   rx_file('%(filepath)s:%(fileregex)s')

[docker_cli/build/jsonvol]
dockerfile_dir_path = /jsonvol
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   intr_exst(),
                   dir_exist('/foo'),
                   dir_exist('/foo/bar'),
                   dir_exist('/usr/local/lib/baz')

[docker_cli/build/onbuild]
# base image build
dockerfile_dir_path = /onbuild/first
postproc_cmd_csv = positive(),
                   rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                   rx_out('First!$'),
                   !rx_out('Schazam!$'),
                   cnt_count('0'),
                   img_count('3'),
                   img_exst(),
                   intr_exst()
#: Name of dockerfile to use for second build.
dockerfile_dir_path2 = /onbuild/second
#: Second build ``postproc_cmd_csv``.
postproc_cmd_csv2 = positive(),
                    rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                    rx_out('Schazam!$'),
                    rx_out('Second!$'),
                    cnt_count('0'),
                    img_count('3'),
                    img_exst(),
                    intr_exst()
#: Name of dockerfile to use for third build.
dockerfile_dir_path3 = /onbuild/third
#: Second build ``postproc_cmd_csv``.
postproc_cmd_csv3 = positive(),
                    rx_out('\s*Successfully built\s*(\w{64}|\w{12})'),
                    !rx_out('Schazam!$'),
                    rx_out('Third!$'),
                    cnt_count('0'),
                    img_count('3'),
                    img_exst(),
                    intr_exst()
