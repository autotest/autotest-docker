[docker_cli/negativeusage]
subsubtests = op1, op2, op3, if1, ov1, iv1, iv3, iv4, ip1
#: Optional docker subcommand (string). Automatically generated substitution keys:{n}
#: {n}
#: {t} * ``%%(FQIN)s`` **-** valid, default test image name{n}
#: {t} * ``%%(NOFQIN)s`` **-** valid image name that doesn't exist{n}
#: {t} * ``%%(RUNCNTR)s`` **-** ID of a running container{n}
#: {t} * ``%%(STPCNTR)s`` **-** ID of a stopped container{n}
#: {t} * ``%%(NAME)s`` **-** Name of a container that doesn't exist{n}
#: {n}
docker_subcmd =
#: Optional docker subcommand arguments (CSV), also accepts same substitutions
#: as ``docker_subcmd``.
docker_subarg =
#: Required exit status integer
docker_exit_status = 125
#: Optional regex that must match to stderr (group #1), also accepts same substitutions
#: as ``docker_subcmd``.
docker_stderr =
#: Optional regex that must match to stdout (group #1), also accepts same substitutions
#: as ``docker_subcmd``.
docker_stdout =

#op: Omit Positional - leave out a required positional parameter
#if: Invalid Flag - Addition of non-existing flag
#ov: Omit Value - Leave out required value to argument (make it like a flag)
#iv: Invalid Value - Give improper/incorrect value to argument
#ip: Invalid Positional - Give value to non-existing positional parameter

[docker_cli/negativeusage/op1]
docker_subcmd = attach
docker_subarg = --no-stdin,--sig-proxy
docker_stderr = "(docker )?attach" requires( exactly)? 1 argument
podman_stderr = attach requires the name or id of one running container
docker_exit_status = 1
podman_exit_status = 125

[docker_cli/negativeusage/op2]
docker_subcmd = run
docker_subarg = --interactive,%%(FQIN)s,/usr/local/sbin/fail
docker_stderr = no such file or directory
docker_exit_status = 127

[docker_cli/negativeusage/op3]
docker_subcmd = run
docker_subarg = --interactive,/usr/local/sbin/fail
docker_stderr = Unable to find image|is not a valid repository/tag
podman_stderr = error parsing reference to image|invalid reference format

[docker_cli/negativeusage/if1]
docker_subcmd = commit
docker_subarg = --authormessage,%%(STPCNTR)s,%%(NOFQIN)s
docker_stderr = flag provided but not defined|unknown flag: --authormessage

[docker_cli/negativeusage/ov1]
docker_subcmd = load
docker_subarg = --input
docker_stderr = flag needs an argument

[docker_cli/negativeusage/iv1]
docker_subcmd = attach
docker_subarg = --no-stdin=sig-proxy
docker_stderr = invalid boolean value "sig-proxy" for  --no-stdin|invalid argument "sig-proxy" for --no-stdin=sig-proxy
podman_stderr = invalid boolean value "sig-proxy" for -no-stdin

[docker_cli/negativeusage/iv3]
docker_subcmd = run
docker_subarg = -p,192.168.9.1:9000,%%(FQIN)s,/bin/true
docker_stderr = Invalid hostPort

[docker_cli/negativeusage/iv4]
docker_subcmd = run
docker_subarg = -e,PATH=/tmp,%%(FQIN)s,true
# N/B: This (commented) 'stderr' exposes RH BZ 1393572.
# stderr = exec\: \"true\"\: executable file not found in \$PATH
# Workaround bug to receive some benefit from this sub-subtest running/passing
docker_stderr = executable file not found
docker_exit_status = 127

[docker_cli/negativeusage/ip1]
docker_subcmd = tag
docker_subarg = %%(RUNCNTR)s,%%(NOFQIN)s
docker_stderr = no such id:
podman_stderr = in local storage: unable to find a name and tag match
docker_exit_status = 1
podman_exit_status = 125

[docker_cli/negativeusage/ip2]
docker_options =
docker_subarg = daemon -g fdsafsd -b dsca -s fdsafs -e feae -- --name=flag_cGpa
# FIXME: BZ 1301147 closed -> add a stderr/stdout check
docker_exit_status = 1
